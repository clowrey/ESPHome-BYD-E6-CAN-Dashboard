# hardware: Guition 3.5" 320x480 LCD touchscreen - CAN on the RX / TX lines 

esphome:
  name: byd-e6-car-gu320
  friendly_name: BYD-E6-CAR-GU320
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: dio # Standard uses a single line for data, Dual IO uses 2 lines for data (prevent reboot loop)
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L
  on_boot:
    - priority: -100.0 
      then:
        - canbus.send: !lambda return {0x02, 0x10, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55}; // init for BMS data

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

preferences:
  flash_write_interval: 1min      

psram:
  mode: octal
  speed: 80MHz #cant go faster than 80 will revert to 40

# Enable logging
logger:
  hardware_uart: USB_SERIAL_JTAG
  level: DEBUG
  logs:
#    sensor: DEBUG
#    text_sensor: DEBUG
#    button: DEBUG
#    number: DEBUG
#    component: ERROR
     #component: VERBOSE
     light.addressable: DEBUG
     scheduler: DEBUG
     wifi: DEBUG
     light: DEBUG
     esp32_rmt_led_strip: DEBUG
     esp32.preferences: DEBUG
     #canbus: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s #disable auto 15min reboot with no HA connection - in car this wont be connected
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  reboot_timeout: 0s #disable reboot if no wifi - Defaults to 15min. Does not apply when in access point mode.
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Byd-E6-Car-WS480 Fallback"
    password: "fallback"

captive_portal:

time:
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      - if:
          condition:
            lambda: 'return id(device_last_restart).state == "";'
          then:
            - text_sensor.template.publish:
                id: device_last_restart
                state: !lambda 'return id(ha_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'

#  - platform: pcf85063
#    id: pcf85063_time

spi:
  id: display_qspi
  type: quad
  clk_pin: 47
  data_pins: [21, 48, 40, 39]

i2c:
  sda: 4
  scl: 8
  id: touchscreen_bus

globals:
  - id: can_frame_index_1s
    type: int
    restore_value: no
    initial_value: '-1'
  - id: can_frame_index_fast
    type: int
    restore_value: no
    initial_value: '-1'
  - id: can_keep_alive
    type: int
    restore_value: no
    initial_value: '100'

interval: 
  - interval: 60s
    then:
      - canbus.send: !lambda return {0x02, 0x10, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55}; // init for BMS data
  - interval: 1s
    then:
      #- canbus.send: !lambda return {0x03, 0x22, 0x0, 0x04, 0x55, 0x55, 0x55, 0x55};
      - canbus.send:
          canbus_id: can1
          can_id: 0x781
          data: !lambda |-
            int index = id(can_frame_index_1s);
            int max_index = 9;     
            if (index >= max_index) index = 0;
            else index++;     
            id(can_frame_index_1s) = index;

            std::vector<uint8_t> can_data(8, 0x00);  // Initialize with 8 zeros
            switch (index)
            {
              case 0:
                can_data = {0x03, 0x22, 0x00, 0x04, 0x55, 0x55, 0x55, 0x55}; // request pack voltage
                break;
              case 1:
                can_data = {0x03, 0x22, 0x00, 0x05, 0x55, 0x55, 0x55, 0x55}; // request pack amps
                break;
              case 02:
                can_data = {0x03, 0x22, 0x00, 0x06, 0x55, 0x55, 0x55, 0x55}; // request pack health index
                break;
              case 3:
                can_data = {0x03, 0x22, 0x00, 0x07, 0x55, 0x55, 0x55, 0x55}; // request pack SOC
                break;
              case 4:
                can_data = {0x03, 0x22, 0x00, 0x08, 0x55, 0x55, 0x55, 0x55}; // request pack temperature max
                break;
              case 5:
                can_data = {0x03, 0x22, 0x00, 0x13, 0x55, 0x55, 0x55, 0x55}; // request voltage cell min number
                break;
              case 6:
                can_data = {0x03, 0x22, 0x00, 0x14, 0x55, 0x55, 0x55, 0x55}; // request voltage cell min
                break;
              case 7:
                can_data = {0x03, 0x22, 0x00, 0x15, 0x55, 0x55, 0x55, 0x55}; // request voltage cell max number
                break;
              case 8:
                can_data = {0x03, 0x22, 0x00, 0x16, 0x55, 0x55, 0x55, 0x55}; // request voltage cell max
                break;
            }
            return can_data;

  - interval: 100ms
    then:
      - canbus.send:
          canbus_id: can1
          can_id: 0x781
          data: !lambda |-
            int index = id(can_frame_index_fast);
            int max_index = 2;     
            if (index >= max_index) index = 0;
            else index++;     
            id(can_frame_index_fast) = index;

            if (id(can_keep_alive) < 1){ // if keep alive has run out 
              //id(can_keep_alive) = 1;
              id(bms_packcurrent).publish_state(0); // set power values to zero
              id(bms_packpower).publish_state(0);
              id(batt_power_in).publish_state(0);
              id(batt_power_out).publish_state(0);
            }
            else{
              id(can_keep_alive) --;
            }

            std::vector<uint8_t> can_data(8, 0x00);  // Initialize with 8 zeros
            switch (index)
            {
              case 0:
                can_data = {0x03, 0x22, 0x00, 0x04, 0x55, 0x55, 0x55, 0x55}; // request pack voltage
                break;
              case 1:
                can_data = {0x03, 0x22, 0x00, 0x05, 0x55, 0x55, 0x55, 0x55}; // request pack amps
                break;
            }
            return can_data;

canbus:
  - platform: esp32_can
    id: can1
    tx_pin: 18     #GPIO43 # TX pin on 5V serial header
    rx_pin: 17     #GPIO44
    can_id: 0x781 # default CAN ID used for transmitting frames.
    bit_rate: 250KBPS
    on_frame:
      - can_id: 0x781 # data request
        then:
          - lambda: |-
              ESP_LOGI("canbus", "can_id: 0x%03x, length: %d, content: %s", can_id, x.size(), format_hex_pretty(x).c_str());          

      - can_id: 0x789 # data received
        then:
          - lambda: |-
              ESP_LOGI("canbus", "can_id: 0x%03x, length: %d, content: %s", can_id, x.size(), format_hex_pretty(x).c_str());

              float value = 0;
              float power = 0;
              char status_type = x[3];
              ESP_LOGI("status_type", "%x", status_type);
              switch (status_type)
              {
                case 0x04:
                  value = (x[5]<<8) | (x[4]); //combine bytes into full value
                  ESP_LOGI("canbus", "Battery Pack Full Voltage: %.02fV", value);
                  id(bms_packvoltage).publish_state(value);
                  break;

                case 0x05:
                  value = float(((x[5]<<8) | (x[4])) - 5000) / 10 ;
                  ESP_LOGI("canbus", "Battery Pack Full Current: %.02fA", value);
                  id(can_keep_alive) = 100;
                  id(bms_packcurrent).publish_state(value);

                  power = (value * id(bms_packvoltage).state); //calculate pack power

                  id(bms_packpower).publish_state(power); 

                  if (power > 0) {
                    id(batt_power_out).publish_state(power);
                  }
                  else {
                    id(batt_power_out).publish_state(0);
                  }

                  if (power < 0) {
                    id(batt_power_in).publish_state(power);
                  }
                  else {
                    id(batt_power_in).publish_state(0);
                  }


                  break;

                case 0x06:
                  value = x[4];
                  ESP_LOGI("canbus", "Health Index: %.02f%%", value);
                  id(bms_healthindex).publish_state(value);
                  break;

                case 0x07:
                  value = x[4];
                  ESP_LOGI("canbus", "SOC: %.02f%%", value);
                  id(bms_soc).publish_state(value);
                  break;

                case 0x08:
                  value = x[4] - 40;
                  ESP_LOGI("canbus", "Pack Temperature Max: %.02fC", value);
                  id(bms_pack_temperature_max).publish_state(value);
                  break;

                case 0x13:
                  value = x[4];
                  ESP_LOGI("canbus", "Voltage Cell Lowest Number: %.0f", value);
                  id(bms_voltagecelllowestnumber).publish_state(value);
                  break;

                case 0x14:
                  value = float((x[5]<<8) | (x[4])) / 100 ;
                  ESP_LOGI("canbus", "Voltage Cell Min: %.02fV", value);
                  id(bms_voltagecellmin).publish_state(value);
                  break;

                case 0x15:
                  value = x[4];
                  ESP_LOGI("canbus", "Voltage Cell Highest Number: %.0f", value);
                  id(bms_voltagecellhighestnumber).publish_state(value);
                  break;

                case 0x16:
                  value = float((x[5]<<8) | (x[4])) / 100 ;
                  ESP_LOGI("canbus", "Voltage Cell Max: %.02fV", value);
                  id(bms_voltagecellmax).publish_state(value);
                  break;
              }
          

sensor:

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: true

  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

  - platform: uptime
    id: uptime_counter
    update_interval: 1s
    accuracy_decimals: 0
    on_raw_value:
      then:
        - number.increment:
            id: uptime_number
            cycle: True
        - script.execute: update_display

  - platform: template
    name: BMS_PackVoltage
    id: bms_packvoltage
    accuracy_decimals: 0
    device_class: voltage
    unit_of_measurement: "V"
    on_value:
      then:
        - lvgl.label.update:
            id: label_voltage
            text:
              format: "%.0fV"
              args: x

  - platform: template
    name: BMS_PackCurrent
    id: bms_packcurrent
    accuracy_decimals: 1
    device_class: current
    unit_of_measurement: "A"
    on_value:
      then:
        - lvgl.label.update:
            id: label_current
            text:
              format: "%.1fA"
              args: x

  - platform: template
    name: BMS_HealthIndex
    id: bms_healthindex
    accuracy_decimals: 2
    unit_of_measurement: "%"

  - platform: template
    name: BMS_SOC
    id: bms_soc
    accuracy_decimals: 2
    unit_of_measurement: "%"

  - platform: template
    name: BMS_PackTemperatureMax
    id: bms_pack_temperature_max
    accuracy_decimals: 0
    device_class: temperature
    unit_of_measurement: "C"
    on_value:
      then:
        - lvgl.label.update:
            id: label_temperature_highest
            text:
              format: "%.0fC"
              args: x

  - platform: template
    name: BMS_VoltageCellLowestNumber
    id: bms_voltagecelllowestnumber
    accuracy_decimals: 0
    on_value:
      then:
        - lvgl.label.update:
            id: label_cell_lowest_number
            text:
              format: "%.0f#"
              args: x

  - platform: template
    name: BMS_VoltageCellMin
    id: bms_voltagecellmin
    accuracy_decimals: 2
    device_class: voltage
    unit_of_measurement: "V"
    on_value:
      then:
        - lvgl.label.update:
            id: label_cell_lowest_v
            text:
              format: "%.2fV"
              args: x

  - platform: template
    name: BMS_VoltageCellHighestNumber
    id: bms_voltagecellhighestnumber
    accuracy_decimals: 0
    on_value:
      then:
        - lvgl.label.update:
            id: label_cell_highest_number
            text:
              format: "%.0f#"
              args: x

  - platform: template
    name: BMS_VoltageCellMax
    id: bms_voltagecellmax
    accuracy_decimals: 2
    device_class: voltage
    unit_of_measurement: "V"
    on_value:
      then:
        - lvgl.label.update:
            id: label_cell_highest_v
            text:
              format: "%.2fV"
              args: x

  - platform: template
    name: BMS_PackPower
    id: bms_packpower
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: "W"
    on_value:
      then:
        - lvgl.label.update:
            id: label_power
            text:
              format: "%.0fW"
              args: x
        - lvgl.bar.update:
            id: bar_power
            value: !lambda 'return float(x);'

  - platform: template
    name: "Battery Power In"
    id: batt_power_in
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: "W"

  - platform: template
    name: "Battery Power Out"
    id: batt_power_out
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: "W"

  - platform: total_daily_energy
    name: 'Pack Energy Daily'
    power_id: bms_packpower
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    restore: true
    accuracy_decimals: 3
    method: left
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    on_value:
      then:
        - lvgl.label.update:
            id: label_energy_daily
            text:
              format: "%.3fkWh"
              args: x

  - platform: integration
    name: 'Pack Energy Total'
    sensor: bms_packpower
    unit_of_measurement: 'kWh'
    time_unit: h
    restore: true
    accuracy_decimals: 3
    state_class: total_increasing
    device_class: energy
    integration_method: left
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    on_value:
      then:
        - lvgl.label.update:
            id: label_energy_total
            text:
              format: "%.3fkWh"
              args: x

  - platform: integration
    name: 'Pack Energy Trip'
    id: pack_energy_trip
    sensor: bms_packpower
    unit_of_measurement: 'kWh'
    time_unit: h
    restore: true
    accuracy_decimals: 3
    state_class: total_increasing
    device_class: energy
    integration_method: left
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    on_value:
      then:
        - lvgl.label.update:
            id: label_energy_trip
            text:
              format: "%.3fkWh"
              args: x

  - platform: integration
    name: 'Pack Energy Trip In'
    id: pack_energy_trip_in
    sensor: batt_power_in
    unit_of_measurement: 'kWh'
    time_unit: h
    restore: true
    accuracy_decimals: 3
    state_class: total_increasing
    device_class: energy
    integration_method: left
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    on_value:
      then:
        - lvgl.label.update:
            id: label_energy_trip_in
            text:
              format: "%.3fkWh"
              args: x

  - platform: integration
    name: 'Pack Energy Trip Out'
    id: pack_energy_trip_out
    sensor: batt_power_out
    unit_of_measurement: 'kWh'
    time_unit: h
    restore: true
    accuracy_decimals: 3
    state_class: total_increasing
    device_class: energy
    integration_method: left
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    on_value:
      then:
        - lvgl.label.update:
            id: label_energy_trip_out
            text:
              format: "%.3fkWh"
              args: x

button:
  - platform: template
    name: "Reset Trip Counters"
    icon: "mdi:restart-alert"
    on_press:
      then:
        - sensor.integration.reset:  pack_energy_trip
        - sensor.integration.reset:  pack_energy_trip_out
        - sensor.integration.reset:  pack_energy_trip_in

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic

number:
  - platform: template
    initial_value: 0
    id: uptime_number
    #internal: True
    step: 1
    optimistic: True
    max_value: 99999999
    min_value: 0

binary_sensor:
  - platform: status
    # name: "Node Status" do not publish
    id: system_status     

display:
  - platform: qspi_dbi
    model: axs15231
    data_rate: 40MHz
    id: my_display
    spi_id: display_qspi
    dimensions:
      height: 480
      width: 320
    cs_pin: 45
    rotation: 90 # 90 for landscape, 0 for portrait
    #update_interval: never
    auto_clear_enabled: false
    #show_test_card: true # must enable update_interval, auto_clear_enable

output:
  - platform: ledc
    pin: GPIO1
    id: backlight

light:
  - platform: monochromatic
    output: backlight
    name: "backlight Light" 
    restore_mode: ALWAYS_ON

touchscreen:
  - platform: axs15231
    id: my_touchscreen
    display: my_display
    i2c_id: touchscreen_bus
    transform:
      swap_xy: true
    on_touch:
      - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
          );

lvgl:
    touchscreens: my_touchscreen
    draw_rounding: 8 # necessary for the axs15231 display controller
    log_level: INFO
    color_depth: 16
    bg_color: 0
    border_width: 0
    outline_width: 0
    #shadow_width: 0
    text_font: unscii_16
    align: center
    style_definitions:
      - id: font_style
        text_font: MONTSERRAT_28
        #text_font: unscii_16
        align: center
        text_color: 0xFFFFFF
        #bg_opa: cover
        bg_opa: TRANSP
        bg_color: 0
        radius: 4
        pad_all: 2 
      - id: details_style
        text_font: MONTSERRAT_16
        align: center
        text_color: 0xFFFFFF
        #bg_opa: cover
        bg_opa: TRANSP
        bg_color: 0
        radius: 4
        pad_all: 2 
    page_wrap: true
    pages:
      - id: main_page
        widgets:
          - obj: # abitrary
              height: 320 # needed to be explicitily defined for my round display to not have weird border line overlapping gauge
              width: 480
              align: center
              bg_color: 0
              #bg_opa: TRANSP
              border_width: 0
              outline_width: 0
              #shadow_width: 0
              pad_all: 0
              scrollbar_mode: "off"
              clip_corner: true
              radius: 120
              widgets:
                - label:
                    styles: font_style
                    id: label_energy_trip_out
                    x: 100
                    y: -90 #negative = higher
                - label:
                    styles: font_style
                    id: label_energy_trip_in
                    x: -100
                    y: -90 #negative = higher
                - label:
                    styles: font_style
                    id: label_uptime
                    y: -60 #negative = higher
                - label:
                    styles: font_style
                    id: label_voltage
                    y: -30 #negative = higher
                - label:
                    styles: font_style
                    id: label_current
                    y: 0 #negative = higher
                - label:
                    styles: font_style
                    id: label_power
                    x: -100
                    y: 30 #negative = higher
                - label:
                    styles: font_style
                    id: label_energy_trip
                    x: 100
                    y: 30 #negative = higher
                - label:
                    styles: font_style
                    id: label_energy_daily
                    x: -100
                    y: 60 #negative = higher
                - label:
                    styles: font_style
                    id: label_energy_total
                    x: 100
                    y: 60 #negative = higher
                - label:
                    styles: font_style
                    id: label_cell_lowest_v
                    x: 50 #positive = to the right of center
                    y: 90 #positive = lower than center
                - label:
                    styles: font_style
                    id: label_cell_lowest_number
                    x: -50 #positive = to the right of center
                    y: 90 #positive = lower than center
                - label:
                    styles: font_style
                    id: label_cell_highest_v
                    x: 50 #positive = to the right of center
                    y: 120 #positive = lower than center
                - label:
                    styles: font_style
                    id: label_cell_highest_number
                    x: -50 #positive = to the right of center
                    y: 120 #positive = lower than center
                - label:
                    styles: font_style
                    id: label_temperature_highest_name
                    text: "Temp Max:"
                    x: -80 #positive = to the right of center
                    y: 150 #positive = lower than center
                - label:
                    styles: font_style
                    id: label_temperature_highest
                    x: 60 #positive = to the right of center
                    y: 150 #positive = lower than center
                - bar:
                    x: 5 # distance from top left to top left of item
                    y: 5 
                    width: 460 # leave 10 pixel gap left and right
                    height: 30
                    bg_color: green
                    radius: 0
                    id: bar_power
                    value: 75
                    min_value: 0
                    max_value: 50000
                    indicator:
                      radius: 0
                      bg_color: 0x00FF00
      - id: settings_page
        widgets:
          - obj: # abitrary
              height: 320 # needed to be explicitily defined for my round display to not have weird border line overlapping gauge
              width: 480
              align: center
              bg_color: 0
              #bg_opa: TRANSP
              border_width: 0
              outline_width: 0
              #shadow_width: 0
              pad_all: 0
              scrollbar_mode: "off"
              clip_corner: true
              radius: 120
              widgets:
                - label:
                    styles: font_style
                    id: label_settings
                    text: "Settings Page"
                    y: -120 #negative = higher

script:
  - id: update_display
    then:
      - lvgl.label.update:
          id: label_uptime
          text:
            format: "%.0fs"
            args: [ 'id(uptime_number).state' ]
      - lvgl.label.update:
          id: label_voltage
          text:
            format: "%.2fV"
            args: [ 'id(bms_packvoltage).state' ]