# hardware: M5 Stack Atom S3 Lite + CAN base


esphome:
  name: byd-e6-car-atom
  friendly_name: BYD-E6-CAR-ATOM
  platformio_options:
    board_build.flash_mode: dio # Standard uses a single line for data, Dual IO uses 2 lines for data (prevent reboot loop)

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf
    
    #version: 5.3.1
    #platform_version: 6.8.1

preferences:
  flash_write_interval: 1min      

# Enable logging
logger:
  hardware_uart: USB_SERIAL_JTAG
  level: DEBUG
  logs:
#    sensor: DEBUG
#    text_sensor: DEBUG
#    button: DEBUG
#    number: DEBUG
#    component: ERROR
     #component: VERBOSE
     light.addressable: DEBUG
     scheduler: DEBUG
     wifi: DEBUG
     light: DEBUG
     esp32_rmt_led_strip: DEBUG
     esp32.preferences: DEBUG
     canbus: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s #disable auto 15min reboot with no HA connection - in car this wont be connected
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  reboot_timeout: 0s #disable reboot if no wifi - Defaults to 15min. Does not apply when in access point mode.
  #ssid: !secret wifi_ssid
  #password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Byd-E6-Car-Atom Fallback Hotspot"
    password: "fallback"
    ap_timeout: 10s #The time after which to enable the configured fallback hotspot.

#captive_portal:

web_server:
  local: true
  log: false
    
#time:
#  - platform: sntp
#    on_time: 
#      seconds: /3 # run every 3 seconds
#      then: 
#        - canbus.send: 
#            data: [ 0x03, 0x22, 0x0, 0x04, 0x55, 0x55, 0x55, 0x55 ] # Request BMS Voltage

time:
  - platform: homeassistant
    id: my_time

globals:
  - id: can_frame_index_1s
    type: int
    restore_value: no
    initial_value: '-1'
  - id: can_frame_index_fast
    type: int
    restore_value: no
    initial_value: '-1'

interval: 
  - interval: 1s
    then:
      #- canbus.send: !lambda return {0x03, 0x22, 0x0, 0x04, 0x55, 0x55, 0x55, 0x55};
      - canbus.send:
          canbus_id: can1
          can_id: 0x781
          data: !lambda |-
            int index = id(can_frame_index_1s);
            int max_index = 9;     
            if (index >= max_index) index = 0;
            else index++;     
            id(can_frame_index_1s) = index;

            std::vector<uint8_t> can_data(8, 0x00);  // Initialize with 8 zeros
            switch (index)
            {
              case 0:
                can_data = {0x03, 0x22, 0x00, 0x04, 0x55, 0x55, 0x55, 0x55}; // request pack voltage
                break;
              case 1:
                can_data = {0x03, 0x22, 0x00, 0x05, 0x55, 0x55, 0x55, 0x55}; // request pack amps
                break;
              case 02:
                can_data = {0x03, 0x22, 0x00, 0x06, 0x55, 0x55, 0x55, 0x55}; // request pack health index
                break;
              case 3:
                can_data = {0x03, 0x22, 0x00, 0x07, 0x55, 0x55, 0x55, 0x55}; // request pack SOC
                break;
              case 4:
                can_data = {0x03, 0x22, 0x00, 0x08, 0x55, 0x55, 0x55, 0x55}; // request pack temperature max
                break;
              case 5:
                can_data = {0x03, 0x22, 0x00, 0x13, 0x55, 0x55, 0x55, 0x55}; // request voltage cell min number
                break;
              case 6:
                can_data = {0x03, 0x22, 0x00, 0x14, 0x55, 0x55, 0x55, 0x55}; // request voltage cell min
                break;
              case 7:
                can_data = {0x03, 0x22, 0x00, 0x15, 0x55, 0x55, 0x55, 0x55}; // request voltage cell max number
                break;
              case 8:
                can_data = {0x03, 0x22, 0x00, 0x16, 0x55, 0x55, 0x55, 0x55}; // request voltage cell max
                break;
            }
            return can_data;

  - interval: 100ms
    then:
      - canbus.send:
          canbus_id: can1
          can_id: 0x781
          data: !lambda |-
            int index = id(can_frame_index_fast);
            int max_index = 2;     
            if (index >= max_index) index = 0;
            else index++;     
            id(can_frame_index_fast) = index;

            std::vector<uint8_t> can_data(8, 0x00);  // Initialize with 8 zeros
            switch (index)
            {
              case 0:
                can_data = {0x03, 0x22, 0x00, 0x04, 0x55, 0x55, 0x55, 0x55}; // request pack voltage
                break;
              case 1:
                can_data = {0x03, 0x22, 0x00, 0x05, 0x55, 0x55, 0x55, 0x55}; // request pack amps
                break;
            }
            return can_data;


canbus:
  - platform: esp32_can
    id: can1
    tx_pin: GPIO5 #2  was 4
    rx_pin: GPIO6 #1  was 5
    can_id: 0x781 # default CAN ID used for transmitting frames.
    bit_rate: 250KBPS
    on_frame:


#      - can_id: 0  # listen to all messages
#        can_id_mask: 0
#        then:
#          - logger.log:
#              level: INFO
#              format: "CAN ID: 0x%03x Data: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
#              args: [ '(uint)can_id', '(uint)x[0]', '(uint)x[1]', '(uint)x[2]', '(uint)x[3]', '(uint)x[4]', '(uint)x[5]', '(uint)x[6]', '(uint)x[7]' ] # x starts with the highest byte


#          - lambda: |-
#              ESP_LOGI("canbus", "can_id: 0x%03x, length: %d, content: %s", can_id, x.size(), format_hex_pretty(x).c_str());



#      - can_id: 0x000 # listen to all messages
#        then:
#          - lambda: |-
#              char buf[29];
#              // DGN
#              // Source Address (SA)
#              // Priority
#              // Data (8 bytes)
#              int dgn = (can_id >>8) & 0x1ffff;
#              int pri = (can_id >> 26) & 0b111;
#              int sa  = can_id & 0xff;
#              snprintf((char*)&buf, sizeof(buf), "%05X,%02X,%1X,%02X%02X%02X%02X%02X%02X%02X%02X", dgn, sa, pri, x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]);
#              ESP_LOGI("can", "%s", (const char*)&buf);

      - can_id: 0x781 # data request
        then:
          - lambda: |-
              ESP_LOGI("canbus", "can_id: 0x%03x, length: %d, content: %s", can_id, x.size(), format_hex_pretty(x).c_str());          
#          - logger.log:
#              level: INFO
#              format: "Status Type Byte: 0x%02x Data: 0x%02x 0x%02x 0x%02x 0x%02x"
#              args: [ '(uint)x[1]', '(uint)x[4]', '(uint)x[5]', '(uint)x[6]', '(uint)x[7]' ]

      - can_id: 0x789 # data received
        then:
          # float value = double((x[4]<<24) | (x[5]<<16) | (x[6]<<8) | (x[7])); //combine bytes into full value    
          # 05 62 00 04 30 01 AA AA	= Voltage 304 = 0130 hex = 304 decimal

          - lambda: |-
              ESP_LOGI("canbus", "can_id: 0x%03x, length: %d, content: %s", can_id, x.size(), format_hex_pretty(x).c_str());

              float value = 0;
              char status_type = x[3];
              ESP_LOGI("status_type", "%x", status_type);
              switch (status_type)
              {
                case 0x04:
                  value = (x[5]<<8) | (x[4]); //combine bytes into full value
                  ESP_LOGI("canbus", "Battery Pack Full Voltage: %.02fV", value);
                  id(bms_packvoltage).publish_state(value);
                  break;

                case 0x05:
                  value = float(((x[5]<<8) | (x[4])) - 5000) / 10 ;
                  ESP_LOGI("canbus", "Battery Pack Full Current: %.02fA", value);
                  id(bms_packcurrent).publish_state(value);

                  id(bms_packpower).publish_state(value * id(bms_packvoltage).state); //calculate pack power
                  break;

                case 0x06:
                  value = x[4];
                  ESP_LOGI("canbus", "Health Index: %.02f%%", value);
                  id(bms_healthindex).publish_state(value);
                  break;

                case 0x07:
                  value = x[4];
                  ESP_LOGI("canbus", "SOC: %.02f%%", value);
                  id(bms_soc).publish_state(value);
                  break;

                case 0x08:
                  value = x[4] - 40;
                  ESP_LOGI("canbus", "Pack Temperature Max: %.02fC", value);
                  id(bms_pack_temperature_max).publish_state(value);
                  break;

                case 0x13:
                  value = x[4];
                  ESP_LOGI("canbus", "Voltage Cell Lowest Number: %.0f", value);
                  id(bms_voltagecelllowestnumber).publish_state(value);
                  break;

                case 0x14:
                  value = float((x[5]<<8) | (x[4])) / 100 ;
                  ESP_LOGI("canbus", "Voltage Cell Min: %.02fV", value);
                  id(bms_voltagecellmin).publish_state(value);
                  break;

                case 0x15:
                  value = x[4];
                  ESP_LOGI("canbus", "Voltage Cell Highest Number: %.0f", value);
                  id(bms_voltagecellhighestnumber).publish_state(value);
                  break;

                case 0x16:
                  value = float((x[5]<<8) | (x[4])) / 100 ;
                  ESP_LOGI("canbus", "Voltage Cell Max: %.02fV", value);
                  id(bms_voltagecellmax).publish_state(value);
                  break;


              }


sensor:
  - platform: template
    name: BMS_PackVoltage
    id: bms_packvoltage
    accuracy_decimals: 0
    device_class: voltage
    unit_of_measurement: "V"

  - platform: template
    name: BMS_PackCurrent
    id: bms_packcurrent
    accuracy_decimals: 1
    device_class: current
    unit_of_measurement: "A"

  - platform: template
    name: BMS_HealthIndex
    id: bms_healthindex
    accuracy_decimals: 2
    unit_of_measurement: "%"

  - platform: template
    name: BMS_SOC
    id: bms_soc
    accuracy_decimals: 2
    unit_of_measurement: "%"

  - platform: template
    name: BMS_PackTemperatureMax
    id: bms_pack_temperature_max
    accuracy_decimals: 0
    device_class: temperature
    unit_of_measurement: "C"

  - platform: template
    name: BMS_VoltageCellLowestNumber
    id: bms_voltagecelllowestnumber
    accuracy_decimals: 0

  - platform: template
    name: BMS_VoltageCellMin
    id: bms_voltagecellmin
    accuracy_decimals: 2
    device_class: voltage
    unit_of_measurement: "V"

  - platform: template
    name: BMS_VoltageCellHighestNumber
    id: bms_voltagecellhighestnumber
    accuracy_decimals: 0

  - platform: template
    name: BMS_VoltageCellMax
    id: bms_voltagecellmax
    accuracy_decimals: 2
    device_class: voltage
    unit_of_measurement: "V"

  - platform: template
    name: BMS_PackPower
    id: bms_packpower
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: "W"

  - platform: total_daily_energy
    name: 'Pack Energy Daily'
    power_id: bms_packpower
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    restore: true
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001