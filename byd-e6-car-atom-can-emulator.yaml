esphome:
  name: byd-e6-car-atom-can-emulator
  friendly_name: BYD-CAN-EMULATOR
  platformio_options:
    board_build.flash_mode: dio # Standard uses a single line for data, Dual IO uses 2 lines for data (prevent reboot loop)

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf
    
    #version: 5.3.1
    #platform_version: 6.8.1

preferences:
  flash_write_interval: 1min      

# Enable logging
logger:
  hardware_uart: USB_SERIAL_JTAG
  level: DEBUG
  logs:
#    sensor: DEBUG
#    text_sensor: DEBUG
#    button: DEBUG
#    number: DEBUG
#    component: ERROR
     #component: VERBOSE
     light.addressable: DEBUG
     scheduler: DEBUG
     wifi: DEBUG
     light: DEBUG
     esp32_rmt_led_strip: DEBUG
     esp32.preferences: DEBUG
     canbus: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s #disable auto 15min reboot with no HA connection - in car this wont be connected
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  reboot_timeout: 0s #disable reboot if no wifi - Defaults to 15min. Does not apply when in access point mode.
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "BYD-CAN-EMULATOR-FALLBACK"
    password: "fallback"
    ap_timeout: 10s #The time after which to enable the configured fallback hotspot.

#captive_portal:

web_server:
  local: true
  log: false

time:
  - platform: homeassistant
    id: my_time

globals:
  - id: can_frame_index_1s
    type: int
    restore_value: no
    initial_value: '-1'
  - id: can_frame_index_fast
    type: int
    restore_value: no
    initial_value: '-1'

interval: 
  - interval: 1s
    then:
      - canbus.send:
          canbus_id: can1
          can_id: 0x789 # changed to send address
          data: !lambda |-
            int index = id(can_frame_index_1s);
            int max_index = 9;     
            if (index >= max_index) index = 0;
            else index++;     
            id(can_frame_index_1s) = index;

            std::vector<uint8_t> can_data(8, 0x00);  // Initialize with 8 zeros
            switch (index)
            {
              case 0:
                can_data = {0x05, 0x62, 0x00, 0x04, 0x30, 0x01, 0xAA, 0xAA}; // send pack voltage
                break;
              case 1:
                can_data = {0x05, 0x62, 0x00, 0x05, 0xAF, 0x13, 0xAA, 0xAA}; // send pack amps
                break;
              case 02:
                can_data = {0x04, 0x62, 0x00, 0x06, 0x64, 0xAA, 0xAA, 0xAA}; // send pack health index
                break;
              case 3:
                can_data = {0x04, 0x62, 0x00, 0x07, 0x63, 0xAA, 0xAA, 0xAA}; // send pack SOC
                break;
              case 4:
                can_data = {0x04, 0x62, 0x00, 0x08, 0x43, 0xAA, 0xAA, 0xAA}; // send pack temperature max
                break;
              case 5:
                can_data = {0x04, 0x62, 0x00, 0x13, 0x0D, 0xAA, 0xAA, 0xAA}; // send voltage cell min number
                break;
              case 6:
                can_data = {0x05, 0x62, 0x00, 0x14, 0x4A, 0x01, 0xAA, 0xAA}; // send voltage cell min
                break;
              case 7:
                can_data = {0x04, 0x62, 0x00, 0x15, 0x30, 0xAA, 0xAA, 0xAA}; // send voltage cell max number
                break;
              case 8:
                can_data = {0x05, 0x62, 0x00, 0x16, 0x4B, 0x01, 0xAA, 0xAA}; // send voltage cell max
                break;
            }
            return can_data;




canbus:
  - platform: esp32_can
    id: can1
    tx_pin: GPIO5 #2  was 4
    rx_pin: GPIO6 #1  was 5
    can_id: 0x781 # default CAN ID used for transmitting frames.
    bit_rate: 250KBPS
